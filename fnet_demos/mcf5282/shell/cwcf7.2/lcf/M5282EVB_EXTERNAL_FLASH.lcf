# Sample Linker Command File for CodeWarrior for ColdFire

KEEP_SECTION {.vectortable}

# Memory ranges	

MEMORY {
    vectorram   (RWX) : ORIGIN = 0x20000000, LENGTH = 0x00000400    # Int SRAM
    userram     (RWX) : ORIGIN = 0x20000400, LENGTH = 0x0000EC00    # 0x0000FC00 - stack_size
#   vectorram   (RWX) : ORIGIN = 0xF0000000, LENGTH = 0x00000500    # Ext SDRAM
#   userram     (RWX) : ORIGIN = 0xF0700000, LENGTH = 0x00100000
    vectorrom   (RX)  : ORIGIN = 0xFFE00000, LENGTH = 0x00001000
    code        (RX)  : ORIGIN = 0xFFE01000, LENGTH = 0x001FF000
    
    fapp_paramsrom   (RW)  : ORIGIN = 0x0007F800,	LENGTH = 0x00000800 # 2KBytes = Last logical-block resevrd for params.
}      


SECTIONS {
 
# Heap and Stack sizes definition
	___heap_size	  = 0x0000;
	___stack_size     = 0x1000;


# Board Memory map definitions from linker command files:
# __EXT_SRAM,__EXT_SRAM_SIZE, __EXT_FLASH, __EXT_FLASH_SIZE linker 
# symbols must be defined in the linker command file.		

   ___EXT_FLASH          = 0xFFE00000;
   ___EXT_FLASH_SIZE     = 0x00200000;
   ___SDRAM		         = 0xF0000000;
   ___SDRAM_SIZE	     = 0x00800000;


# MCF5282 Derivative Memory map definitions from linker command files 
# __FLASHBAR, __FLASHBAR_SIZE, __RAMBAR, __RAMBAR_SIZE, 
# __IPSBAR linker symbols must be defined in the linker 
# command file.
   ___IPSBAR		 = 0x40000000;

   ___FLASHBAR	     = 0x00000000;
   ___FLASHBAR_SIZE	 = 0x00080000;
   ___RAMBAR		 = 0x20000000;
   ___RAMBAR_SIZE 	 = 0x00010000;

   ___SP_AFTER_RESET = ___RAMBAR + ___RAMBAR_SIZE - 4;
   
  .userram	  : {} > userram		
  .code	    : {} > code		
  .vectorram	: {} > vectorram			
	
	.vectors :
	{
		exceptions.c(.vectortable)
		. = ALIGN (0x4); 
	} > vectorrom


	.text :
	{
		*(.text)
		. = ALIGN (0x4);
		*(.rodata)
		. = ALIGN (0x4);		
		___ROM_AT = .;
		___DATA_ROM = .;
	} >> code

	.data : AT(___ROM_AT) 
	{  
		fnet_cfm.c(.fnet_cfm) # == Flash driver code ==
		
		___DATA_RAM = .;
		. = ALIGN(0x4);
		*(.exception)	
		. = ALIGN(0x4);	
		__exception_table_start__ = .;
		EXCEPTION
		__exception_table_end__ = .;
		
		___sinit__ = .;
	    STATICINIT
		__START_DATA = .;

		*(.data)
		. = ALIGN (0x4);
		__END_DATA = .;

		__START_SDATA = .;
		*(.sdata)
		. = ALIGN (0x4);
		__END_SDATA = .;

		___DATA_END = .;
		__SDA_BASE = .;
		. = ALIGN (0x4);
	} >> userram

	.bss :
	{
		___BSS_START = .;
		__START_SBSS = .;
		*(.sbss)
		. = ALIGN (0x4);
		*(SCOMMON)
		__END_SBSS = .;

		__START_BSS = .;
		*(.bss)
		. = ALIGN (0x4);
		*(COMMON)
		__END_BSS = .;
		___BSS_END = .;

		. = ALIGN(0x4);
	} >> userram

	.custom :
	{
		___HEAP_START	= .;
		___heap_addr	= ___HEAP_START;
		___HEAP_END		= ___HEAP_START + ___heap_size;
		___SP_END		= ___HEAP_END;
		___SP_INIT		= ___SP_END + ___stack_size;

		. = ALIGN (0x4);
	} >> userram
  	
	___VECTOR_RAM		= ADDR(.vectorram);
	
	__SP_INIT		= ___SP_INIT;

	_romp_at = ___ROM_AT + SIZEOF(.data);
	.romp : AT(_romp_at)
	{
		__S_romp = _romp_at;
		WRITEW(___ROM_AT);
		WRITEW(ADDR(.data));
		WRITEW(SIZEOF(.data));
		WRITEW(0);
		WRITEW(0);
		WRITEW(0);
	}
	
	# ====== Definitions used by FNET Application. =======
	.params :{} > fapp_paramsrom
    
    ___FAPP_CFM_PAGE_SIZE   = (2*1024);
    
    ___FAPP_PARAMS      = ADDR(.params);
    ___FAPP_PARAMS_SIZE = ___FAPP_CFM_PAGE_SIZE;
}