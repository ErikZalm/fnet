# Sample Linker Command File for CodeWarrior for ColdFire

KEEP_SECTION {.vectortable}

# Memory ranges	

MEMORY {
   vectorram   (RWX) : ORIGIN = 0x80000000, LENGTH = 0x00000500
   userram     (RWX) : ORIGIN = 0x40000500, LENGTH = 0x10000000
   vectorrom   (RX)  : ORIGIN = 0x00000000, LENGTH = 0x00000400
   code        (RX)  : ORIGIN = 0x00000400, LENGTH = 0x0007FC00
   #code        (RX)  : ORIGIN = 0x00000F80, LENGTH = 0x0FFFE000 # the rest of the NAND Flash (data @0xF80 in rbin is flashed to page#4/block#0, LENGHT = 0x10000000 - 0x2000)
}

SECTIONS {

    ___heap_size      = 0x8000;
    ___stack_size     = 0x8000;


# Board Memory map definitions from linker command files:
# __SDRAM_ADDRESS,__SDRAM_ADDRESS_BANK0, __SDRAM_ADDRESS_BANK1,__SDRAM_SIZE, 
# __FLASH_ADDRESS linker symbols must be defined in the linker command file.		
	___SDRAM_ADDRESS	= 0x40000000;
	___SDRAM_ADDRESS_BANK0	= 0x40000000;
	___SDRAM_ADDRESS_BANK1	= 0x44000000;
	___SDRAM_SIZE		= 0x08000000;


	___FLASH0_ADDRESS	 = 0x04000000;
	___FLASH0_SIZE		 = 0x00080000;	

	___FLASH1_ADDRESS	 = 0x00000000;
	___FLASH1_SIZE		 = (16 * 1024 * 1024);	

	___FLASH_ADDRESS	 = 0x04000000;




# MCF54418 Derivative Memory map definitions from linker command files 
# ___MMUBAR, ___RAMBAR, ___RAMBAR_SIZE ,
# linker symbols must be defined in the linker 
# command file.

# 64 Kbytes Internal SRAM
  ___MMUBAR				= 0x11000000;
	___RAMBAR			= 0x80000000;
	___RAMBAR_SIZE			= 0x00010000;

   ___SP_AFTER_RESET = ___RAMBAR + ___RAMBAR_SIZE - 4;
   
  .userram	  : {} > userram		
  .code	    : {} > code		
  .vectorram	: {} > vectorram			
	
	.vectors :
	{
		exceptions_c.obj(.vectortable)
		. = ALIGN (0x4); 
	} > vectorrom


	.text :
	{
		*(.text)
		. = ALIGN (0x4);
		*(.rodata)
		. = ALIGN (0x4);		
		___ROM_AT = .;
		___DATA_ROM = .;
	} >> code

	.data : AT(___ROM_AT) 
	{  
		___DATA_RAM = .;
		. = ALIGN(0x4);
		*(.exception)	
		. = ALIGN(0x4);	
		__exception_table_start__ = .;
		EXCEPTION
		__exception_table_end__ = .;
		
		___sinit__ = .;
	    STATICINIT
		__START_DATA = .;

		*(.data)
		. = ALIGN (0x4);
		__END_DATA = .;

		__START_SDATA = .;
		*(.sdata)
		. = ALIGN (0x4);
		__END_SDATA = .;

		___DATA_END = .;
		__SDA_BASE = .;
		. = ALIGN (0x4);
	} >> userram

	.bss :
	{
		___BSS_START = .;
		__START_SBSS = .;
		*(.sbss)
		. = ALIGN (0x4);
		*(SCOMMON)
		__END_SBSS = .;

		__START_BSS = .;
		*(.bss)
		. = ALIGN (0x4);
		*(COMMON)
		__END_BSS = .;
		___BSS_END = .;

		. = ALIGN(0x4);
	} >> userram

	.custom :
	{
		___HEAP_START	= .;
		___heap_addr	= ___HEAP_START;
		___HEAP_END		= ___HEAP_START + ___heap_size;
		___SP_END		= ___HEAP_END;
		___SP_INIT		= ___SP_END + ___stack_size;

		. = ALIGN (0x4);
	} >> userram
  	
	___VECTOR_RAM		= ADDR(.vectorram);
	
	__SP_INIT		= ___SP_INIT;
	___mem_limit = ___HEAP_END;
	___stack_safety = 16;

	_romp_at = ___ROM_AT + SIZEOF(.data);
	.romp : AT(_romp_at)
	{
		__S_romp = _romp_at;
		WRITEW(___ROM_AT);
		WRITEW(ADDR(.data));
		WRITEW(SIZEOF(.data));
		WRITEW(0);
		WRITEW(0);
		WRITEW(0);
	}

}
